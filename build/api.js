"use strict";
/**
 * SNAP PAC REST API
 *
 * OpenAPI spec version: R1.0a
 * Contact: developer@opto22.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var request = require("request");
var Promise = require("bluebird");
var defaultBasePath = 'http://restpac.groov.com/api/v1';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
/* tslint:disable:no-unused-variable */
var ControllerResponse = /** @class */ (function () {
    function ControllerResponse() {
    }
    return ControllerResponse;
}());
exports.ControllerResponse = ControllerResponse;
var DigitalPointStateObject = /** @class */ (function () {
    function DigitalPointStateObject() {
    }
    return DigitalPointStateObject;
}());
exports.DigitalPointStateObject = DigitalPointStateObject;
var DigitalPointStateVar = /** @class */ (function () {
    function DigitalPointStateVar() {
    }
    return DigitalPointStateVar;
}());
exports.DigitalPointStateVar = DigitalPointStateVar;
var ErrorResponse200OKish = /** @class */ (function () {
    function ErrorResponse200OKish() {
    }
    return ErrorResponse200OKish;
}());
exports.ErrorResponse200OKish = ErrorResponse200OKish;
var ErrorResponse400BadAdminOrValue = /** @class */ (function () {
    function ErrorResponse400BadAdminOrValue() {
    }
    return ErrorResponse400BadAdminOrValue;
}());
exports.ErrorResponse400BadAdminOrValue = ErrorResponse400BadAdminOrValue;
var ErrorResponse401BadKeyForBasicAuth = /** @class */ (function () {
    function ErrorResponse401BadKeyForBasicAuth() {
    }
    return ErrorResponse401BadKeyForBasicAuth;
}());
exports.ErrorResponse401BadKeyForBasicAuth = ErrorResponse401BadKeyForBasicAuth;
var ErrorResponse404NotFound = /** @class */ (function () {
    function ErrorResponse404NotFound() {
    }
    return ErrorResponse404NotFound;
}());
exports.ErrorResponse404NotFound = ErrorResponse404NotFound;
var FloatValueObject = /** @class */ (function () {
    function FloatValueObject() {
    }
    return FloatValueObject;
}());
exports.FloatValueObject = FloatValueObject;
var FloatVar = /** @class */ (function () {
    function FloatVar() {
    }
    return FloatVar;
}());
exports.FloatVar = FloatVar;
var Int32ValueObject = /** @class */ (function () {
    function Int32ValueObject() {
    }
    return Int32ValueObject;
}());
exports.Int32ValueObject = Int32ValueObject;
var Int32Var = /** @class */ (function () {
    function Int32Var() {
    }
    return Int32Var;
}());
exports.Int32Var = Int32Var;
var Int64StringValueObject = /** @class */ (function () {
    function Int64StringValueObject() {
    }
    return Int64StringValueObject;
}());
exports.Int64StringValueObject = Int64StringValueObject;
var Int64ValueObject = /** @class */ (function () {
    function Int64ValueObject() {
    }
    return Int64ValueObject;
}());
exports.Int64ValueObject = Int64ValueObject;
var Int64Var = /** @class */ (function () {
    function Int64Var() {
    }
    return Int64Var;
}());
exports.Int64Var = Int64Var;
var Int64VarAsString = /** @class */ (function () {
    function Int64VarAsString() {
    }
    return Int64VarAsString;
}());
exports.Int64VarAsString = Int64VarAsString;
var StrategyResponse = /** @class */ (function () {
    function StrategyResponse() {
    }
    return StrategyResponse;
}());
exports.StrategyResponse = StrategyResponse;
var StringValueObject = /** @class */ (function () {
    function StringValueObject() {
    }
    return StringValueObject;
}());
exports.StringValueObject = StringValueObject;
var StringVar = /** @class */ (function () {
    function StringVar() {
    }
    return StringVar;
}());
exports.StringVar = StringVar;
var TableDef = /** @class */ (function () {
    function TableDef() {
    }
    return TableDef;
}());
exports.TableDef = TableDef;
var HttpBasicAuth = /** @class */ (function () {
    function HttpBasicAuth() {
    }
    HttpBasicAuth.prototype.applyToRequest = function (requestOptions) {
        // Only SNAP PAC needs "requestOptions.auth" to be set.
        // If we're talking to Groov EPIC, then the username will have been set to a special
        // value in "api-ex.ts".
        if (this.username != 'groov-epic-pac-skip-reqoptions-auth') {
            requestOptions.auth = {
                username: this.username, password: this.password
            };
        }
    };
    return HttpBasicAuth;
}());
exports.HttpBasicAuth = HttpBasicAuth;
var ApiKeyAuth = /** @class */ (function () {
    function ApiKeyAuth(location, paramName) {
        this.location = location;
        this.paramName = paramName;
    }
    ApiKeyAuth.prototype.applyToRequest = function (requestOptions) {
        if (this.location == "query") {
            requestOptions.qs[this.paramName] = this.apiKey;
        }
        else if (this.location == "header") {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    };
    return ApiKeyAuth;
}());
exports.ApiKeyAuth = ApiKeyAuth;
var OAuth = /** @class */ (function () {
    function OAuth() {
    }
    OAuth.prototype.applyToRequest = function (requestOptions) {
        requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
    };
    return OAuth;
}());
exports.OAuth = OAuth;
var VoidAuth = /** @class */ (function () {
    function VoidAuth() {
    }
    VoidAuth.prototype.applyToRequest = function (requestOptions) {
        // Do nothing
    };
    return VoidAuth;
}());
exports.VoidAuth = VoidAuth;
var AllApiApiKeys;
(function (AllApiApiKeys) {
})(AllApiApiKeys = exports.AllApiApiKeys || (exports.AllApiApiKeys = {}));
var AllApi = /** @class */ (function () {
    function AllApi(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'basicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(AllApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    AllApi.prototype.setApiKey = function (key, value) {
        this.authentications[AllApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(AllApi.prototype, "username", {
        set: function (username) {
            this.authentications.basicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AllApi.prototype, "password", {
        set: function (password) {
            this.authentications.basicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    AllApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    /**
     *
     * Reads the value in engineering units (EU) of the specified analog input
     * @param ioName Name of the analog input point to read
     */
    AllApi.prototype.readAnalogInputEu = function (ioName) {
        var localVarPath = this.basePath + '/device/strategy/ios/analogInputs/{ioName}/eu'
            .replace('{' + 'ioName' + '}', String(ioName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'ioName' is not null or undefined
        if (ioName === null || ioName === undefined) {
            throw new Error('Required parameter ioName was null or undefined when calling readAnalogInputEu.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns the name and engineering units (EU) for all analog input points in the strategy
     */
    AllApi.prototype.readAnalogInputs = function () {
        var localVarPath = this.basePath + '/device/strategy/ios/analogInputs';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Reads the value in engineering units (EU) of the specified analog output
     * @param ioName Name of analog output point to read
     */
    AllApi.prototype.readAnalogOutputEu = function (ioName) {
        var localVarPath = this.basePath + '/device/strategy/ios/analogOutputs/{ioName}/eu'
            .replace('{' + 'ioName' + '}', String(ioName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'ioName' is not null or undefined
        if (ioName === null || ioName === undefined) {
            throw new Error('Required parameter ioName was null or undefined when calling readAnalogOutputEu.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns the name and engineering units (EU) for all analog output points in the strategy
     */
    AllApi.prototype.readAnalogOutputs = function () {
        var localVarPath = this.basePath + '/device/strategy/ios/analogOutputs';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns controller&#39;s type, e.g. \&quot;SNAP-PAC-R1\&quot;; firmware version; both mac addresses; and uptime in seconds
     */
    AllApi.prototype.readDeviceDetails = function () {
        var localVarPath = this.basePath + '/device';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns the specified digital input point&#39;s state (true &#x3D; on, false &#x3D; off)
     * @param ioName Name of the digital input point to read
     */
    AllApi.prototype.readDigitalInputState = function (ioName) {
        var localVarPath = this.basePath + '/device/strategy/ios/digitalInputs/{ioName}/state'
            .replace('{' + 'ioName' + '}', String(ioName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'ioName' is not null or undefined
        if (ioName === null || ioName === undefined) {
            throw new Error('Required parameter ioName was null or undefined when calling readDigitalInputState.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns the name and state (true &#x3D; on, false &#x3D; off) of all digital input points in the strategy. If there is no strategy in the controller, or the strategy includes no digital inputs, the returned array will be empty.
     */
    AllApi.prototype.readDigitalInputs = function () {
        var localVarPath = this.basePath + '/device/strategy/ios/digitalInputs';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns the specified digital output point&#39;s state (true &#x3D; on, false &#x3D; off)
     * @param ioName Name of the digit output point to read
     */
    AllApi.prototype.readDigitalOutputState = function (ioName) {
        var localVarPath = this.basePath + '/device/strategy/ios/digitalOutputs/{ioName}/state'
            .replace('{' + 'ioName' + '}', String(ioName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'ioName' is not null or undefined
        if (ioName === null || ioName === undefined) {
            throw new Error('Required parameter ioName was null or undefined when calling readDigitalOutputState.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns the name and state (true &#x3D; on, false &#x3D; off) of all digital output points in the strategy
     */
    AllApi.prototype.readDigitalOutputs = function () {
        var localVarPath = this.basePath + '/device/strategy/ios/digitalOutputs';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns current value of the specified down timer
     * @param downTimerName Name of the down timer variable to read
     */
    AllApi.prototype.readDownTimerValue = function (downTimerName) {
        var localVarPath = this.basePath + '/device/strategy/vars/downTimers/{downTimerName}/value'
            .replace('{' + 'downTimerName' + '}', String(downTimerName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'downTimerName' is not null or undefined
        if (downTimerName === null || downTimerName === undefined) {
            throw new Error('Required parameter downTimerName was null or undefined when calling readDownTimerValue.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns the name and current value of all down timers in the strategy
     */
    AllApi.prototype.readDownTimerVars = function () {
        var localVarPath = this.basePath + '/device/strategy/vars/downTimers';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Read table elements
     * @param tableName Name of float table to read; starting index and number of elements may be specified (defaults to all elements)
     * @param startIndex Index of first element to read (default is 0)
     * @param numElements Number of elements to read (default is number of elements in the table minus startIndex)
     */
    AllApi.prototype.readFloatTable = function (tableName, startIndex, numElements) {
        var localVarPath = this.basePath + '/device/strategy/tables/floats/{tableName}'
            .replace('{' + 'tableName' + '}', String(tableName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling readFloatTable.');
        }
        if (startIndex !== undefined) {
            queryParameters['startIndex'] = startIndex;
        }
        if (numElements !== undefined) {
            queryParameters['numElements'] = numElements;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Read specified table element
     * @param tableName Name of float table to read
     * @param index Index of element to read
     */
    AllApi.prototype.readFloatTableElement = function (tableName, index) {
        var localVarPath = this.basePath + '/device/strategy/tables/floats/{tableName}/{index}'
            .replace('{' + 'tableName' + '}', String(tableName))
            .replace('{' + 'index' + '}', String(index));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling readFloatTableElement.');
        }
        // verify required parameter 'index' is not null or undefined
        if (index === null || index === undefined) {
            throw new Error('Required parameter index was null or undefined when calling readFloatTableElement.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns an array of the name and length of all the float tables in the strategy
     */
    AllApi.prototype.readFloatTables = function () {
        var localVarPath = this.basePath + '/device/strategy/tables/floats';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns value of the specified float variable
     * @param floatName Name of float variable to read
     */
    AllApi.prototype.readFloatVar = function (floatName) {
        var localVarPath = this.basePath + '/device/strategy/vars/floats/{floatName}'
            .replace('{' + 'floatName' + '}', String(floatName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'floatName' is not null or undefined
        if (floatName === null || floatName === undefined) {
            throw new Error('Required parameter floatName was null or undefined when calling readFloatVar.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns the name and value of all (single-precision) float variables in the strategy
     */
    AllApi.prototype.readFloatVars = function () {
        var localVarPath = this.basePath + '/device/strategy/vars/floats';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Read a range of table elements from the specified integer32 table
     * @param tableName Name of integer32 table to read; starting index and number of elements may be specified (defaults to all elements)
     * @param startIndex Index of first element to read (default is 0)
     * @param numElements Number of elements to read (default is number of elements in the table minus startIndex)
     */
    AllApi.prototype.readInt32Table = function (tableName, startIndex, numElements) {
        var localVarPath = this.basePath + '/device/strategy/tables/int32s/{tableName}'
            .replace('{' + 'tableName' + '}', String(tableName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling readInt32Table.');
        }
        if (startIndex !== undefined) {
            queryParameters['startIndex'] = startIndex;
        }
        if (numElements !== undefined) {
            queryParameters['numElements'] = numElements;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Read specified integer32 table element
     * @param tableName Name of the integer32 table to read
     * @param index Index of element to read
     */
    AllApi.prototype.readInt32TableElement = function (tableName, index) {
        var localVarPath = this.basePath + '/device/strategy/tables/int32s/{tableName}/{index}'
            .replace('{' + 'tableName' + '}', String(tableName))
            .replace('{' + 'index' + '}', String(index));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling readInt32TableElement.');
        }
        // verify required parameter 'index' is not null or undefined
        if (index === null || index === undefined) {
            throw new Error('Required parameter index was null or undefined when calling readInt32TableElement.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns an array of the name and length of all the integer32 tables in the strategy
     */
    AllApi.prototype.readInt32Tables = function () {
        var localVarPath = this.basePath + '/device/strategy/tables/int32s';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns value of the specified integer32 variable
     * @param int32Name Name of integer32 variable to read
     */
    AllApi.prototype.readInt32Var = function (int32Name) {
        var localVarPath = this.basePath + '/device/strategy/vars/int32s/{int32Name}'
            .replace('{' + 'int32Name' + '}', String(int32Name));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'int32Name' is not null or undefined
        if (int32Name === null || int32Name === undefined) {
            throw new Error('Required parameter int32Name was null or undefined when calling readInt32Var.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns the name and value of all integer32 variables in the strategy
     */
    AllApi.prototype.readInt32Vars = function () {
        var localVarPath = this.basePath + '/device/strategy/vars/int32s';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Read table elements
     * @param tableName Name of the integer64 table to read; starting index and number of elements may be specified (defaults to all elements)
     * @param startIndex Index of first element to read (default is 0)
     * @param numElements Number of elements to read (default is number of elements in the table minus startIndex)
     */
    AllApi.prototype.readInt64Table = function (tableName, startIndex, numElements) {
        var localVarPath = this.basePath + '/device/strategy/tables/int64s/{tableName}'
            .replace('{' + 'tableName' + '}', String(tableName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling readInt64Table.');
        }
        if (startIndex !== undefined) {
            queryParameters['startIndex'] = startIndex;
        }
        if (numElements !== undefined) {
            queryParameters['numElements'] = numElements;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Read table elements as strings
     * @param tableName Name of the integer64 table to read; starting index and number of elements may be specified (defaults to all elements)
     * @param startIndex Index of first element to read (default is 0)
     * @param numElements Number of elements to read (default is number of elements in the table minus startIndex)
     */
    AllApi.prototype.readInt64TableAsString = function (tableName, startIndex, numElements) {
        var localVarPath = this.basePath + '/device/strategy/tables/int64s/{tableName}/_string'
            .replace('{' + 'tableName' + '}', String(tableName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling readInt64TableAsString.');
        }
        if (startIndex !== undefined) {
            queryParameters['startIndex'] = startIndex;
        }
        if (numElements !== undefined) {
            queryParameters['numElements'] = numElements;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Read specified integer64 table element
     * @param tableName Name of integer64 table to read
     * @param index Index of element to read
     */
    AllApi.prototype.readInt64TableElement = function (tableName, index) {
        var localVarPath = this.basePath + '/device/strategy/tables/int64s/{tableName}/{index}'
            .replace('{' + 'tableName' + '}', String(tableName))
            .replace('{' + 'index' + '}', String(index));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling readInt64TableElement.');
        }
        // verify required parameter 'index' is not null or undefined
        if (index === null || index === undefined) {
            throw new Error('Required parameter index was null or undefined when calling readInt64TableElement.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Read specified integer64 table element as string
     * @param tableName Name of integer64 table to read
     * @param index Index of element to read
     */
    AllApi.prototype.readInt64TableElementAsString = function (tableName, index) {
        var localVarPath = this.basePath + '/device/strategy/tables/int64s/{tableName}/{index}/_string'
            .replace('{' + 'tableName' + '}', String(tableName))
            .replace('{' + 'index' + '}', String(index));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling readInt64TableElementAsString.');
        }
        // verify required parameter 'index' is not null or undefined
        if (index === null || index === undefined) {
            throw new Error('Required parameter index was null or undefined when calling readInt64TableElementAsString.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns an array of the name and length of all the integer64 tables in the strategy
     */
    AllApi.prototype.readInt64Tables = function () {
        var localVarPath = this.basePath + '/device/strategy/tables/int64s';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns value of the specified integer64 variable
     * @param int64Name Name of integer64 variable to read
     */
    AllApi.prototype.readInt64Var = function (int64Name) {
        var localVarPath = this.basePath + '/device/strategy/vars/int64s/{int64Name}'
            .replace('{' + 'int64Name' + '}', String(int64Name));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'int64Name' is not null or undefined
        if (int64Name === null || int64Name === undefined) {
            throw new Error('Required parameter int64Name was null or undefined when calling readInt64Var.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns value of the specified integer64 variable as a string
     * @param int64Name Name of integer64 variable to read
     */
    AllApi.prototype.readInt64VarAsString = function (int64Name) {
        var localVarPath = this.basePath + '/device/strategy/vars/int64s/{int64Name}/_string'
            .replace('{' + 'int64Name' + '}', String(int64Name));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'int64Name' is not null or undefined
        if (int64Name === null || int64Name === undefined) {
            throw new Error('Required parameter int64Name was null or undefined when calling readInt64VarAsString.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns the name and value of all integer64 variables in the strategy
     */
    AllApi.prototype.readInt64Vars = function () {
        var localVarPath = this.basePath + '/device/strategy/vars/int64s';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns the name and value as a string of all integer64 variables in the strategy
     */
    AllApi.prototype.readInt64VarsAsStrings = function () {
        var localVarPath = this.basePath + '/device/strategy/vars/int64s/_string';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns the name, date, time, and CRC of the strategy currently in the controller, and the number of charts currently running. Empty strings and a 0 will be returned when there is no strategy.
     */
    AllApi.prototype.readStrategyDetails = function () {
        var localVarPath = this.basePath + '/device/strategy';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Read table elements
     * @param tableName Name of string table to read; starting index and number of elements may be specified (defaults to all elements)
     * @param startIndex Index of first element to read (default is 0)
     * @param numElements Number of elements to read (default is number of elements in the table minus startIndex)
     */
    AllApi.prototype.readStringTable = function (tableName, startIndex, numElements) {
        var localVarPath = this.basePath + '/device/strategy/tables/strings/{tableName}'
            .replace('{' + 'tableName' + '}', String(tableName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling readStringTable.');
        }
        if (startIndex !== undefined) {
            queryParameters['startIndex'] = startIndex;
        }
        if (numElements !== undefined) {
            queryParameters['numElements'] = numElements;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Read specified table element
     * @param tableName Name of string table to read
     * @param index Index of element to read
     */
    AllApi.prototype.readStringTableElement = function (tableName, index) {
        var localVarPath = this.basePath + '/device/strategy/tables/strings/{tableName}/{index}'
            .replace('{' + 'tableName' + '}', String(tableName))
            .replace('{' + 'index' + '}', String(index));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling readStringTableElement.');
        }
        // verify required parameter 'index' is not null or undefined
        if (index === null || index === undefined) {
            throw new Error('Required parameter index was null or undefined when calling readStringTableElement.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns an array of the name and length of all the string tables in the strategy
     */
    AllApi.prototype.readStringTables = function () {
        var localVarPath = this.basePath + '/device/strategy/tables/strings';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns value of the specified string
     * @param stringName Name of string variable to read
     */
    AllApi.prototype.readStringVar = function (stringName) {
        var localVarPath = this.basePath + '/device/strategy/vars/strings/{stringName}'
            .replace('{' + 'stringName' + '}', String(stringName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'stringName' is not null or undefined
        if (stringName === null || stringName === undefined) {
            throw new Error('Required parameter stringName was null or undefined when calling readStringVar.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns the name and value of all string variables in the strategy
     */
    AllApi.prototype.readStringVars = function () {
        var localVarPath = this.basePath + '/device/strategy/vars/strings';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns current value of the specified up timer
     * @param upTimerName Name of the up timer variable to read
     */
    AllApi.prototype.readUpTimerValue = function (upTimerName) {
        var localVarPath = this.basePath + '/device/strategy/vars/upTimers/{upTimerName}/value'
            .replace('{' + 'upTimerName' + '}', String(upTimerName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'upTimerName' is not null or undefined
        if (upTimerName === null || upTimerName === undefined) {
            throw new Error('Required parameter upTimerName was null or undefined when calling readUpTimerValue.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns the name and current value of all up timers in the strategy
     */
    AllApi.prototype.readUpTimerVars = function () {
        var localVarPath = this.basePath + '/device/strategy/vars/upTimers';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Sets the value of the specified analog output point
     * @param ioName Name of the analog output point to write
     * @param body Value to write
     */
    AllApi.prototype.writeAnalogOutputEu = function (ioName, body) {
        var localVarPath = this.basePath + '/device/strategy/ios/analogOutputs/{ioName}/eu'
            .replace('{' + 'ioName' + '}', String(ioName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'ioName' is not null or undefined
        if (ioName === null || ioName === undefined) {
            throw new Error('Required parameter ioName was null or undefined when calling writeAnalogOutputEu.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling writeAnalogOutputEu.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Sets the value of the specified digital output point
     * @param ioName Name of the digital output point to write
     * @param body Value to write
     */
    AllApi.prototype.writeDigitalOutputState = function (ioName, body) {
        var localVarPath = this.basePath + '/device/strategy/ios/digitalOutputs/{ioName}/state'
            .replace('{' + 'ioName' + '}', String(ioName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'ioName' is not null or undefined
        if (ioName === null || ioName === undefined) {
            throw new Error('Required parameter ioName was null or undefined when calling writeDigitalOutputState.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling writeDigitalOutputState.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Write table elements
     * @param tableName Name of float table to write; starting index may be specified
     * @param floatArray Array of element values to write starting at startIndex
     * @param startIndex Index of first element to write (default is 0)
     */
    AllApi.prototype.writeFloatTable = function (tableName, floatArray, startIndex) {
        var localVarPath = this.basePath + '/device/strategy/tables/floats/{tableName}'
            .replace('{' + 'tableName' + '}', String(tableName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling writeFloatTable.');
        }
        // verify required parameter 'floatArray' is not null or undefined
        if (floatArray === null || floatArray === undefined) {
            throw new Error('Required parameter floatArray was null or undefined when calling writeFloatTable.');
        }
        if (startIndex !== undefined) {
            queryParameters['startIndex'] = startIndex;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: floatArray,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Write specified table element
     * @param tableName Name of float table to write
     * @param index Index of element to write
     * @param floatElementObject Element to write starting at index
     */
    AllApi.prototype.writeFloatTableElement = function (tableName, index, floatElementObject) {
        var localVarPath = this.basePath + '/device/strategy/tables/floats/{tableName}/{index}'
            .replace('{' + 'tableName' + '}', String(tableName))
            .replace('{' + 'index' + '}', String(index));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling writeFloatTableElement.');
        }
        // verify required parameter 'index' is not null or undefined
        if (index === null || index === undefined) {
            throw new Error('Required parameter index was null or undefined when calling writeFloatTableElement.');
        }
        // verify required parameter 'floatElementObject' is not null or undefined
        if (floatElementObject === null || floatElementObject === undefined) {
            throw new Error('Required parameter floatElementObject was null or undefined when calling writeFloatTableElement.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: floatElementObject,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Sets the value of a float variable
     * @param floatName Name of the float variable to write
     * @param body Value to write to the float variable
     */
    AllApi.prototype.writeFloatVar = function (floatName, body) {
        var localVarPath = this.basePath + '/device/strategy/vars/floats/{floatName}'
            .replace('{' + 'floatName' + '}', String(floatName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'floatName' is not null or undefined
        if (floatName === null || floatName === undefined) {
            throw new Error('Required parameter floatName was null or undefined when calling writeFloatVar.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling writeFloatVar.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Write a range of table elements
     * @param tableName Name of integer32 table to write; starting index may be specified
     * @param int32Array Array of element values to write starting at startIndex; if the list of elements is too long to fit in the specified table, extra elements will be ignored
     * @param startIndex Index of first element to write (default is 0)
     */
    AllApi.prototype.writeInt32Table = function (tableName, int32Array, startIndex) {
        var localVarPath = this.basePath + '/device/strategy/tables/int32s/{tableName}'
            .replace('{' + 'tableName' + '}', String(tableName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling writeInt32Table.');
        }
        // verify required parameter 'int32Array' is not null or undefined
        if (int32Array === null || int32Array === undefined) {
            throw new Error('Required parameter int32Array was null or undefined when calling writeInt32Table.');
        }
        if (startIndex !== undefined) {
            queryParameters['startIndex'] = startIndex;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: int32Array,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Write specified integer32 table element
     * @param tableName Name of the integer32 table to write
     * @param index Index of element to write
     * @param int32ElementObject Element to write at index specified
     */
    AllApi.prototype.writeInt32TableElement = function (tableName, index, int32ElementObject) {
        var localVarPath = this.basePath + '/device/strategy/tables/int32s/{tableName}/{index}'
            .replace('{' + 'tableName' + '}', String(tableName))
            .replace('{' + 'index' + '}', String(index));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling writeInt32TableElement.');
        }
        // verify required parameter 'index' is not null or undefined
        if (index === null || index === undefined) {
            throw new Error('Required parameter index was null or undefined when calling writeInt32TableElement.');
        }
        // verify required parameter 'int32ElementObject' is not null or undefined
        if (int32ElementObject === null || int32ElementObject === undefined) {
            throw new Error('Required parameter int32ElementObject was null or undefined when calling writeInt32TableElement.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: int32ElementObject,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Sets the value of an integer32 variable
     * @param int32Name Name of integer32 variable to write
     * @param body Value to write to the integer32 variable
     */
    AllApi.prototype.writeInt32Var = function (int32Name, body) {
        var localVarPath = this.basePath + '/device/strategy/vars/int32s/{int32Name}'
            .replace('{' + 'int32Name' + '}', String(int32Name));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'int32Name' is not null or undefined
        if (int32Name === null || int32Name === undefined) {
            throw new Error('Required parameter int32Name was null or undefined when calling writeInt32Var.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling writeInt32Var.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Write table elements
     * @param tableName Name of integer64 table to write; starting index may be specified
     * @param int64Array Array of element values to write starting at startIndex; if the array of elements is too long to fit in the specified table, extra elements will be ignored
     * @param startIndex Index of first element to write; default is 0
     */
    AllApi.prototype.writeInt64Table = function (tableName, int64Array, startIndex) {
        var localVarPath = this.basePath + '/device/strategy/tables/int64s/{tableName}'
            .replace('{' + 'tableName' + '}', String(tableName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling writeInt64Table.');
        }
        // verify required parameter 'int64Array' is not null or undefined
        if (int64Array === null || int64Array === undefined) {
            throw new Error('Required parameter int64Array was null or undefined when calling writeInt64Table.');
        }
        if (startIndex !== undefined) {
            queryParameters['startIndex'] = startIndex;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: int64Array,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Write table elements as strings
     * @param tableName Name of integer64 table to write; starting index may be specified
     * @param int64AsStringArray Array of element values to write starting at startIndex; if the array of elements is too long to fit in the specified table, extra elements will be ignored
     * @param startIndex Index of first element to write; default is 0.
     */
    AllApi.prototype.writeInt64TableAsString = function (tableName, int64AsStringArray, startIndex) {
        var localVarPath = this.basePath + '/device/strategy/tables/int64s/{tableName}/_string'
            .replace('{' + 'tableName' + '}', String(tableName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling writeInt64TableAsString.');
        }
        // verify required parameter 'int64AsStringArray' is not null or undefined
        if (int64AsStringArray === null || int64AsStringArray === undefined) {
            throw new Error('Required parameter int64AsStringArray was null or undefined when calling writeInt64TableAsString.');
        }
        if (startIndex !== undefined) {
            queryParameters['startIndex'] = startIndex;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: int64AsStringArray,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Write specified integer64 table element
     * @param tableName Name of the integer64 table to write
     * @param index Index of element to write
     * @param int64ElementObject Element to write starting at index specified
     */
    AllApi.prototype.writeInt64TableElement = function (tableName, index, int64ElementObject) {
        var localVarPath = this.basePath + '/device/strategy/tables/int64s/{tableName}/{index}'
            .replace('{' + 'tableName' + '}', String(tableName))
            .replace('{' + 'index' + '}', String(index));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling writeInt64TableElement.');
        }
        // verify required parameter 'index' is not null or undefined
        if (index === null || index === undefined) {
            throw new Error('Required parameter index was null or undefined when calling writeInt64TableElement.');
        }
        // verify required parameter 'int64ElementObject' is not null or undefined
        if (int64ElementObject === null || int64ElementObject === undefined) {
            throw new Error('Required parameter int64ElementObject was null or undefined when calling writeInt64TableElement.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: int64ElementObject,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Write specified integer64 table element as string
     * @param tableName Name of the integer64 table to write
     * @param index Index of element to write
     * @param int64ElementObject Element to write starting at index specified
     */
    AllApi.prototype.writeInt64TableElementAsString = function (tableName, index, int64ElementObject) {
        var localVarPath = this.basePath + '/device/strategy/tables/int64s/{tableName}/{index}/_string'
            .replace('{' + 'tableName' + '}', String(tableName))
            .replace('{' + 'index' + '}', String(index));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling writeInt64TableElementAsString.');
        }
        // verify required parameter 'index' is not null or undefined
        if (index === null || index === undefined) {
            throw new Error('Required parameter index was null or undefined when calling writeInt64TableElementAsString.');
        }
        // verify required parameter 'int64ElementObject' is not null or undefined
        if (int64ElementObject === null || int64ElementObject === undefined) {
            throw new Error('Required parameter int64ElementObject was null or undefined when calling writeInt64TableElementAsString.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: int64ElementObject,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Sets the value of an integer64 variable
     * @param int64Name Name of integer64 variable to write
     * @param body Value to write to the integer64 variable
     */
    AllApi.prototype.writeInt64Var = function (int64Name, body) {
        var localVarPath = this.basePath + '/device/strategy/vars/int64s/{int64Name}'
            .replace('{' + 'int64Name' + '}', String(int64Name));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'int64Name' is not null or undefined
        if (int64Name === null || int64Name === undefined) {
            throw new Error('Required parameter int64Name was null or undefined when calling writeInt64Var.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling writeInt64Var.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Sets the value of an integer64 variable as a string
     * @param int64Name Name of integer64 variable to write
     * @param body Value to write to the integer64 variable
     */
    AllApi.prototype.writeInt64VarAsString = function (int64Name, body) {
        var localVarPath = this.basePath + '/device/strategy/vars/int64s/{int64Name}/_string'
            .replace('{' + 'int64Name' + '}', String(int64Name));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'int64Name' is not null or undefined
        if (int64Name === null || int64Name === undefined) {
            throw new Error('Required parameter int64Name was null or undefined when calling writeInt64VarAsString.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling writeInt64VarAsString.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Write table elements
     * @param tableName Name of string table to write; starting index may be specified
     * @param stringArray Array of element values to write starting at startIndex; if an element value is longer than the string width, the string will be truncated to fit
     * @param startIndex Index of first element to write (default is 0)
     */
    AllApi.prototype.writeStringTable = function (tableName, stringArray, startIndex) {
        var localVarPath = this.basePath + '/device/strategy/tables/strings/{tableName}'
            .replace('{' + 'tableName' + '}', String(tableName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling writeStringTable.');
        }
        // verify required parameter 'stringArray' is not null or undefined
        if (stringArray === null || stringArray === undefined) {
            throw new Error('Required parameter stringArray was null or undefined when calling writeStringTable.');
        }
        if (startIndex !== undefined) {
            queryParameters['startIndex'] = startIndex;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: stringArray,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Write specified table element
     * @param tableName Name of string table to write
     * @param index Index of element to write
     * @param stringElementObject Element to write starting at index
     */
    AllApi.prototype.writeStringTableElement = function (tableName, index, stringElementObject) {
        var localVarPath = this.basePath + '/device/strategy/tables/strings/{tableName}/{index}'
            .replace('{' + 'tableName' + '}', String(tableName))
            .replace('{' + 'index' + '}', String(index));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling writeStringTableElement.');
        }
        // verify required parameter 'index' is not null or undefined
        if (index === null || index === undefined) {
            throw new Error('Required parameter index was null or undefined when calling writeStringTableElement.');
        }
        // verify required parameter 'stringElementObject' is not null or undefined
        if (stringElementObject === null || stringElementObject === undefined) {
            throw new Error('Required parameter stringElementObject was null or undefined when calling writeStringTableElement.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: stringElementObject,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Sets the value of a string variable
     * @param stringName Name of string variable to write
     * @param body String to write. If the value is longer than the string width, the string will be truncated to fit.
     */
    AllApi.prototype.writeStringVar = function (stringName, body) {
        var localVarPath = this.basePath + '/device/strategy/vars/strings/{stringName}'
            .replace('{' + 'stringName' + '}', String(stringName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'stringName' is not null or undefined
        if (stringName === null || stringName === undefined) {
            throw new Error('Required parameter stringName was null or undefined when calling writeStringVar.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling writeStringVar.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return AllApi;
}());
exports.AllApi = AllApi;
var DeviceApiApiKeys;
(function (DeviceApiApiKeys) {
})(DeviceApiApiKeys = exports.DeviceApiApiKeys || (exports.DeviceApiApiKeys = {}));
var DeviceApi = /** @class */ (function () {
    function DeviceApi(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'basicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(DeviceApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    DeviceApi.prototype.setApiKey = function (key, value) {
        this.authentications[DeviceApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(DeviceApi.prototype, "username", {
        set: function (username) {
            this.authentications.basicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeviceApi.prototype, "password", {
        set: function (password) {
            this.authentications.basicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    DeviceApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    /**
     *
     * Returns controller&#39;s type, e.g. \&quot;SNAP-PAC-R1\&quot;; firmware version; both mac addresses; and uptime in seconds
     */
    DeviceApi.prototype.readDeviceDetails = function () {
        var localVarPath = this.basePath + '/device';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return DeviceApi;
}());
exports.DeviceApi = DeviceApi;
var IosApiApiKeys;
(function (IosApiApiKeys) {
})(IosApiApiKeys = exports.IosApiApiKeys || (exports.IosApiApiKeys = {}));
var IosApi = /** @class */ (function () {
    function IosApi(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'basicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(IosApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    IosApi.prototype.setApiKey = function (key, value) {
        this.authentications[IosApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(IosApi.prototype, "username", {
        set: function (username) {
            this.authentications.basicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IosApi.prototype, "password", {
        set: function (password) {
            this.authentications.basicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    IosApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    /**
     *
     * Reads the value in engineering units (EU) of the specified analog input
     * @param ioName Name of the analog input point to read
     */
    IosApi.prototype.readAnalogInputEu = function (ioName) {
        var localVarPath = this.basePath + '/device/strategy/ios/analogInputs/{ioName}/eu'
            .replace('{' + 'ioName' + '}', String(ioName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'ioName' is not null or undefined
        if (ioName === null || ioName === undefined) {
            throw new Error('Required parameter ioName was null or undefined when calling readAnalogInputEu.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns the name and engineering units (EU) for all analog input points in the strategy
     */
    IosApi.prototype.readAnalogInputs = function () {
        var localVarPath = this.basePath + '/device/strategy/ios/analogInputs';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Reads the value in engineering units (EU) of the specified analog output
     * @param ioName Name of analog output point to read
     */
    IosApi.prototype.readAnalogOutputEu = function (ioName) {
        var localVarPath = this.basePath + '/device/strategy/ios/analogOutputs/{ioName}/eu'
            .replace('{' + 'ioName' + '}', String(ioName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'ioName' is not null or undefined
        if (ioName === null || ioName === undefined) {
            throw new Error('Required parameter ioName was null or undefined when calling readAnalogOutputEu.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns the name and engineering units (EU) for all analog output points in the strategy
     */
    IosApi.prototype.readAnalogOutputs = function () {
        var localVarPath = this.basePath + '/device/strategy/ios/analogOutputs';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns the specified digital input point&#39;s state (true &#x3D; on, false &#x3D; off)
     * @param ioName Name of the digital input point to read
     */
    IosApi.prototype.readDigitalInputState = function (ioName) {
        var localVarPath = this.basePath + '/device/strategy/ios/digitalInputs/{ioName}/state'
            .replace('{' + 'ioName' + '}', String(ioName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'ioName' is not null or undefined
        if (ioName === null || ioName === undefined) {
            throw new Error('Required parameter ioName was null or undefined when calling readDigitalInputState.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns the name and state (true &#x3D; on, false &#x3D; off) of all digital input points in the strategy. If there is no strategy in the controller, or the strategy includes no digital inputs, the returned array will be empty.
     */
    IosApi.prototype.readDigitalInputs = function () {
        var localVarPath = this.basePath + '/device/strategy/ios/digitalInputs';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns the specified digital output point&#39;s state (true &#x3D; on, false &#x3D; off)
     * @param ioName Name of the digit output point to read
     */
    IosApi.prototype.readDigitalOutputState = function (ioName) {
        var localVarPath = this.basePath + '/device/strategy/ios/digitalOutputs/{ioName}/state'
            .replace('{' + 'ioName' + '}', String(ioName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'ioName' is not null or undefined
        if (ioName === null || ioName === undefined) {
            throw new Error('Required parameter ioName was null or undefined when calling readDigitalOutputState.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns the name and state (true &#x3D; on, false &#x3D; off) of all digital output points in the strategy
     */
    IosApi.prototype.readDigitalOutputs = function () {
        var localVarPath = this.basePath + '/device/strategy/ios/digitalOutputs';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Sets the value of the specified analog output point
     * @param ioName Name of the analog output point to write
     * @param body Value to write
     */
    IosApi.prototype.writeAnalogOutputEu = function (ioName, body) {
        var localVarPath = this.basePath + '/device/strategy/ios/analogOutputs/{ioName}/eu'
            .replace('{' + 'ioName' + '}', String(ioName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'ioName' is not null or undefined
        if (ioName === null || ioName === undefined) {
            throw new Error('Required parameter ioName was null or undefined when calling writeAnalogOutputEu.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling writeAnalogOutputEu.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Sets the value of the specified digital output point
     * @param ioName Name of the digital output point to write
     * @param body Value to write
     */
    IosApi.prototype.writeDigitalOutputState = function (ioName, body) {
        var localVarPath = this.basePath + '/device/strategy/ios/digitalOutputs/{ioName}/state'
            .replace('{' + 'ioName' + '}', String(ioName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'ioName' is not null or undefined
        if (ioName === null || ioName === undefined) {
            throw new Error('Required parameter ioName was null or undefined when calling writeDigitalOutputState.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling writeDigitalOutputState.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return IosApi;
}());
exports.IosApi = IosApi;
var StrategyApiApiKeys;
(function (StrategyApiApiKeys) {
})(StrategyApiApiKeys = exports.StrategyApiApiKeys || (exports.StrategyApiApiKeys = {}));
var StrategyApi = /** @class */ (function () {
    function StrategyApi(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'basicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(StrategyApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    StrategyApi.prototype.setApiKey = function (key, value) {
        this.authentications[StrategyApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(StrategyApi.prototype, "username", {
        set: function (username) {
            this.authentications.basicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StrategyApi.prototype, "password", {
        set: function (password) {
            this.authentications.basicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    StrategyApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    /**
     *
     * Returns the name, date, time, and CRC of the strategy currently in the controller, and the number of charts currently running. Empty strings and a 0 will be returned when there is no strategy.
     */
    StrategyApi.prototype.readStrategyDetails = function () {
        var localVarPath = this.basePath + '/device/strategy';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return StrategyApi;
}());
exports.StrategyApi = StrategyApi;
var TablesApiApiKeys;
(function (TablesApiApiKeys) {
})(TablesApiApiKeys = exports.TablesApiApiKeys || (exports.TablesApiApiKeys = {}));
var TablesApi = /** @class */ (function () {
    function TablesApi(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'basicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(TablesApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    TablesApi.prototype.setApiKey = function (key, value) {
        this.authentications[TablesApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(TablesApi.prototype, "username", {
        set: function (username) {
            this.authentications.basicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TablesApi.prototype, "password", {
        set: function (password) {
            this.authentications.basicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    TablesApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    /**
     *
     * Read table elements
     * @param tableName Name of float table to read; starting index and number of elements may be specified (defaults to all elements)
     * @param startIndex Index of first element to read (default is 0)
     * @param numElements Number of elements to read (default is number of elements in the table minus startIndex)
     */
    TablesApi.prototype.readFloatTable = function (tableName, startIndex, numElements) {
        var localVarPath = this.basePath + '/device/strategy/tables/floats/{tableName}'
            .replace('{' + 'tableName' + '}', String(tableName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling readFloatTable.');
        }
        if (startIndex !== undefined) {
            queryParameters['startIndex'] = startIndex;
        }
        if (numElements !== undefined) {
            queryParameters['numElements'] = numElements;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Read specified table element
     * @param tableName Name of float table to read
     * @param index Index of element to read
     */
    TablesApi.prototype.readFloatTableElement = function (tableName, index) {
        var localVarPath = this.basePath + '/device/strategy/tables/floats/{tableName}/{index}'
            .replace('{' + 'tableName' + '}', String(tableName))
            .replace('{' + 'index' + '}', String(index));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling readFloatTableElement.');
        }
        // verify required parameter 'index' is not null or undefined
        if (index === null || index === undefined) {
            throw new Error('Required parameter index was null or undefined when calling readFloatTableElement.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns an array of the name and length of all the float tables in the strategy
     */
    TablesApi.prototype.readFloatTables = function () {
        var localVarPath = this.basePath + '/device/strategy/tables/floats';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Read a range of table elements from the specified integer32 table
     * @param tableName Name of integer32 table to read; starting index and number of elements may be specified (defaults to all elements)
     * @param startIndex Index of first element to read (default is 0)
     * @param numElements Number of elements to read (default is number of elements in the table minus startIndex)
     */
    TablesApi.prototype.readInt32Table = function (tableName, startIndex, numElements) {
        var localVarPath = this.basePath + '/device/strategy/tables/int32s/{tableName}'
            .replace('{' + 'tableName' + '}', String(tableName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling readInt32Table.');
        }
        if (startIndex !== undefined) {
            queryParameters['startIndex'] = startIndex;
        }
        if (numElements !== undefined) {
            queryParameters['numElements'] = numElements;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Read specified integer32 table element
     * @param tableName Name of the integer32 table to read
     * @param index Index of element to read
     */
    TablesApi.prototype.readInt32TableElement = function (tableName, index) {
        var localVarPath = this.basePath + '/device/strategy/tables/int32s/{tableName}/{index}'
            .replace('{' + 'tableName' + '}', String(tableName))
            .replace('{' + 'index' + '}', String(index));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling readInt32TableElement.');
        }
        // verify required parameter 'index' is not null or undefined
        if (index === null || index === undefined) {
            throw new Error('Required parameter index was null or undefined when calling readInt32TableElement.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns an array of the name and length of all the integer32 tables in the strategy
     */
    TablesApi.prototype.readInt32Tables = function () {
        var localVarPath = this.basePath + '/device/strategy/tables/int32s';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Read table elements
     * @param tableName Name of the integer64 table to read; starting index and number of elements may be specified (defaults to all elements)
     * @param startIndex Index of first element to read (default is 0)
     * @param numElements Number of elements to read (default is number of elements in the table minus startIndex)
     */
    TablesApi.prototype.readInt64Table = function (tableName, startIndex, numElements) {
        var localVarPath = this.basePath + '/device/strategy/tables/int64s/{tableName}'
            .replace('{' + 'tableName' + '}', String(tableName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling readInt64Table.');
        }
        if (startIndex !== undefined) {
            queryParameters['startIndex'] = startIndex;
        }
        if (numElements !== undefined) {
            queryParameters['numElements'] = numElements;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Read table elements as strings
     * @param tableName Name of the integer64 table to read; starting index and number of elements may be specified (defaults to all elements)
     * @param startIndex Index of first element to read (default is 0)
     * @param numElements Number of elements to read (default is number of elements in the table minus startIndex)
     */
    TablesApi.prototype.readInt64TableAsString = function (tableName, startIndex, numElements) {
        var localVarPath = this.basePath + '/device/strategy/tables/int64s/{tableName}/_string'
            .replace('{' + 'tableName' + '}', String(tableName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling readInt64TableAsString.');
        }
        if (startIndex !== undefined) {
            queryParameters['startIndex'] = startIndex;
        }
        if (numElements !== undefined) {
            queryParameters['numElements'] = numElements;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Read specified integer64 table element
     * @param tableName Name of integer64 table to read
     * @param index Index of element to read
     */
    TablesApi.prototype.readInt64TableElement = function (tableName, index) {
        var localVarPath = this.basePath + '/device/strategy/tables/int64s/{tableName}/{index}'
            .replace('{' + 'tableName' + '}', String(tableName))
            .replace('{' + 'index' + '}', String(index));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling readInt64TableElement.');
        }
        // verify required parameter 'index' is not null or undefined
        if (index === null || index === undefined) {
            throw new Error('Required parameter index was null or undefined when calling readInt64TableElement.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Read specified integer64 table element as string
     * @param tableName Name of integer64 table to read
     * @param index Index of element to read
     */
    TablesApi.prototype.readInt64TableElementAsString = function (tableName, index) {
        var localVarPath = this.basePath + '/device/strategy/tables/int64s/{tableName}/{index}/_string'
            .replace('{' + 'tableName' + '}', String(tableName))
            .replace('{' + 'index' + '}', String(index));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling readInt64TableElementAsString.');
        }
        // verify required parameter 'index' is not null or undefined
        if (index === null || index === undefined) {
            throw new Error('Required parameter index was null or undefined when calling readInt64TableElementAsString.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns an array of the name and length of all the integer64 tables in the strategy
     */
    TablesApi.prototype.readInt64Tables = function () {
        var localVarPath = this.basePath + '/device/strategy/tables/int64s';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Read table elements
     * @param tableName Name of string table to read; starting index and number of elements may be specified (defaults to all elements)
     * @param startIndex Index of first element to read (default is 0)
     * @param numElements Number of elements to read (default is number of elements in the table minus startIndex)
     */
    TablesApi.prototype.readStringTable = function (tableName, startIndex, numElements) {
        var localVarPath = this.basePath + '/device/strategy/tables/strings/{tableName}'
            .replace('{' + 'tableName' + '}', String(tableName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling readStringTable.');
        }
        if (startIndex !== undefined) {
            queryParameters['startIndex'] = startIndex;
        }
        if (numElements !== undefined) {
            queryParameters['numElements'] = numElements;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Read specified table element
     * @param tableName Name of string table to read
     * @param index Index of element to read
     */
    TablesApi.prototype.readStringTableElement = function (tableName, index) {
        var localVarPath = this.basePath + '/device/strategy/tables/strings/{tableName}/{index}'
            .replace('{' + 'tableName' + '}', String(tableName))
            .replace('{' + 'index' + '}', String(index));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling readStringTableElement.');
        }
        // verify required parameter 'index' is not null or undefined
        if (index === null || index === undefined) {
            throw new Error('Required parameter index was null or undefined when calling readStringTableElement.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns an array of the name and length of all the string tables in the strategy
     */
    TablesApi.prototype.readStringTables = function () {
        var localVarPath = this.basePath + '/device/strategy/tables/strings';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Write table elements
     * @param tableName Name of float table to write; starting index may be specified
     * @param floatArray Array of element values to write starting at startIndex
     * @param startIndex Index of first element to write (default is 0)
     */
    TablesApi.prototype.writeFloatTable = function (tableName, floatArray, startIndex) {
        var localVarPath = this.basePath + '/device/strategy/tables/floats/{tableName}'
            .replace('{' + 'tableName' + '}', String(tableName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling writeFloatTable.');
        }
        // verify required parameter 'floatArray' is not null or undefined
        if (floatArray === null || floatArray === undefined) {
            throw new Error('Required parameter floatArray was null or undefined when calling writeFloatTable.');
        }
        if (startIndex !== undefined) {
            queryParameters['startIndex'] = startIndex;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: floatArray,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Write specified table element
     * @param tableName Name of float table to write
     * @param index Index of element to write
     * @param floatElementObject Element to write starting at index
     */
    TablesApi.prototype.writeFloatTableElement = function (tableName, index, floatElementObject) {
        var localVarPath = this.basePath + '/device/strategy/tables/floats/{tableName}/{index}'
            .replace('{' + 'tableName' + '}', String(tableName))
            .replace('{' + 'index' + '}', String(index));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling writeFloatTableElement.');
        }
        // verify required parameter 'index' is not null or undefined
        if (index === null || index === undefined) {
            throw new Error('Required parameter index was null or undefined when calling writeFloatTableElement.');
        }
        // verify required parameter 'floatElementObject' is not null or undefined
        if (floatElementObject === null || floatElementObject === undefined) {
            throw new Error('Required parameter floatElementObject was null or undefined when calling writeFloatTableElement.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: floatElementObject,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Write a range of table elements
     * @param tableName Name of integer32 table to write; starting index may be specified
     * @param int32Array Array of element values to write starting at startIndex; if the list of elements is too long to fit in the specified table, extra elements will be ignored
     * @param startIndex Index of first element to write (default is 0)
     */
    TablesApi.prototype.writeInt32Table = function (tableName, int32Array, startIndex) {
        var localVarPath = this.basePath + '/device/strategy/tables/int32s/{tableName}'
            .replace('{' + 'tableName' + '}', String(tableName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling writeInt32Table.');
        }
        // verify required parameter 'int32Array' is not null or undefined
        if (int32Array === null || int32Array === undefined) {
            throw new Error('Required parameter int32Array was null or undefined when calling writeInt32Table.');
        }
        if (startIndex !== undefined) {
            queryParameters['startIndex'] = startIndex;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: int32Array,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Write specified integer32 table element
     * @param tableName Name of the integer32 table to write
     * @param index Index of element to write
     * @param int32ElementObject Element to write at index specified
     */
    TablesApi.prototype.writeInt32TableElement = function (tableName, index, int32ElementObject) {
        var localVarPath = this.basePath + '/device/strategy/tables/int32s/{tableName}/{index}'
            .replace('{' + 'tableName' + '}', String(tableName))
            .replace('{' + 'index' + '}', String(index));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling writeInt32TableElement.');
        }
        // verify required parameter 'index' is not null or undefined
        if (index === null || index === undefined) {
            throw new Error('Required parameter index was null or undefined when calling writeInt32TableElement.');
        }
        // verify required parameter 'int32ElementObject' is not null or undefined
        if (int32ElementObject === null || int32ElementObject === undefined) {
            throw new Error('Required parameter int32ElementObject was null or undefined when calling writeInt32TableElement.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: int32ElementObject,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Write table elements
     * @param tableName Name of integer64 table to write; starting index may be specified
     * @param int64Array Array of element values to write starting at startIndex; if the array of elements is too long to fit in the specified table, extra elements will be ignored
     * @param startIndex Index of first element to write; default is 0
     */
    TablesApi.prototype.writeInt64Table = function (tableName, int64Array, startIndex) {
        var localVarPath = this.basePath + '/device/strategy/tables/int64s/{tableName}'
            .replace('{' + 'tableName' + '}', String(tableName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling writeInt64Table.');
        }
        // verify required parameter 'int64Array' is not null or undefined
        if (int64Array === null || int64Array === undefined) {
            throw new Error('Required parameter int64Array was null or undefined when calling writeInt64Table.');
        }
        if (startIndex !== undefined) {
            queryParameters['startIndex'] = startIndex;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: int64Array,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Write table elements as strings
     * @param tableName Name of integer64 table to write; starting index may be specified
     * @param int64AsStringArray Array of element values to write starting at startIndex; if the array of elements is too long to fit in the specified table, extra elements will be ignored
     * @param startIndex Index of first element to write; default is 0.
     */
    TablesApi.prototype.writeInt64TableAsString = function (tableName, int64AsStringArray, startIndex) {
        var localVarPath = this.basePath + '/device/strategy/tables/int64s/{tableName}/_string'
            .replace('{' + 'tableName' + '}', String(tableName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling writeInt64TableAsString.');
        }
        // verify required parameter 'int64AsStringArray' is not null or undefined
        if (int64AsStringArray === null || int64AsStringArray === undefined) {
            throw new Error('Required parameter int64AsStringArray was null or undefined when calling writeInt64TableAsString.');
        }
        if (startIndex !== undefined) {
            queryParameters['startIndex'] = startIndex;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: int64AsStringArray,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Write specified integer64 table element
     * @param tableName Name of the integer64 table to write
     * @param index Index of element to write
     * @param int64ElementObject Element to write starting at index specified
     */
    TablesApi.prototype.writeInt64TableElement = function (tableName, index, int64ElementObject) {
        var localVarPath = this.basePath + '/device/strategy/tables/int64s/{tableName}/{index}'
            .replace('{' + 'tableName' + '}', String(tableName))
            .replace('{' + 'index' + '}', String(index));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling writeInt64TableElement.');
        }
        // verify required parameter 'index' is not null or undefined
        if (index === null || index === undefined) {
            throw new Error('Required parameter index was null or undefined when calling writeInt64TableElement.');
        }
        // verify required parameter 'int64ElementObject' is not null or undefined
        if (int64ElementObject === null || int64ElementObject === undefined) {
            throw new Error('Required parameter int64ElementObject was null or undefined when calling writeInt64TableElement.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: int64ElementObject,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Write specified integer64 table element as string
     * @param tableName Name of the integer64 table to write
     * @param index Index of element to write
     * @param int64ElementObject Element to write starting at index specified
     */
    TablesApi.prototype.writeInt64TableElementAsString = function (tableName, index, int64ElementObject) {
        var localVarPath = this.basePath + '/device/strategy/tables/int64s/{tableName}/{index}/_string'
            .replace('{' + 'tableName' + '}', String(tableName))
            .replace('{' + 'index' + '}', String(index));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling writeInt64TableElementAsString.');
        }
        // verify required parameter 'index' is not null or undefined
        if (index === null || index === undefined) {
            throw new Error('Required parameter index was null or undefined when calling writeInt64TableElementAsString.');
        }
        // verify required parameter 'int64ElementObject' is not null or undefined
        if (int64ElementObject === null || int64ElementObject === undefined) {
            throw new Error('Required parameter int64ElementObject was null or undefined when calling writeInt64TableElementAsString.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: int64ElementObject,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Write table elements
     * @param tableName Name of string table to write; starting index may be specified
     * @param stringArray Array of element values to write starting at startIndex; if an element value is longer than the string width, the string will be truncated to fit
     * @param startIndex Index of first element to write (default is 0)
     */
    TablesApi.prototype.writeStringTable = function (tableName, stringArray, startIndex) {
        var localVarPath = this.basePath + '/device/strategy/tables/strings/{tableName}'
            .replace('{' + 'tableName' + '}', String(tableName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling writeStringTable.');
        }
        // verify required parameter 'stringArray' is not null or undefined
        if (stringArray === null || stringArray === undefined) {
            throw new Error('Required parameter stringArray was null or undefined when calling writeStringTable.');
        }
        if (startIndex !== undefined) {
            queryParameters['startIndex'] = startIndex;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: stringArray,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Write specified table element
     * @param tableName Name of string table to write
     * @param index Index of element to write
     * @param stringElementObject Element to write starting at index
     */
    TablesApi.prototype.writeStringTableElement = function (tableName, index, stringElementObject) {
        var localVarPath = this.basePath + '/device/strategy/tables/strings/{tableName}/{index}'
            .replace('{' + 'tableName' + '}', String(tableName))
            .replace('{' + 'index' + '}', String(index));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'tableName' is not null or undefined
        if (tableName === null || tableName === undefined) {
            throw new Error('Required parameter tableName was null or undefined when calling writeStringTableElement.');
        }
        // verify required parameter 'index' is not null or undefined
        if (index === null || index === undefined) {
            throw new Error('Required parameter index was null or undefined when calling writeStringTableElement.');
        }
        // verify required parameter 'stringElementObject' is not null or undefined
        if (stringElementObject === null || stringElementObject === undefined) {
            throw new Error('Required parameter stringElementObject was null or undefined when calling writeStringTableElement.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: stringElementObject,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return TablesApi;
}());
exports.TablesApi = TablesApi;
var VarsApiApiKeys;
(function (VarsApiApiKeys) {
})(VarsApiApiKeys = exports.VarsApiApiKeys || (exports.VarsApiApiKeys = {}));
var VarsApi = /** @class */ (function () {
    function VarsApi(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'basicAuth': new HttpBasicAuth(),
        };
        if (password) {
            this.username = basePathOrUsername;
            this.password = password;
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(VarsApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    VarsApi.prototype.setApiKey = function (key, value) {
        this.authentications[VarsApiApiKeys[key]].apiKey = value;
    };
    Object.defineProperty(VarsApi.prototype, "username", {
        set: function (username) {
            this.authentications.basicAuth.username = username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VarsApi.prototype, "password", {
        set: function (password) {
            this.authentications.basicAuth.password = password;
        },
        enumerable: true,
        configurable: true
    });
    VarsApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    /**
     *
     * Returns current value of the specified down timer
     * @param downTimerName Name of the down timer variable to read
     */
    VarsApi.prototype.readDownTimerValue = function (downTimerName) {
        var localVarPath = this.basePath + '/device/strategy/vars/downTimers/{downTimerName}/value'
            .replace('{' + 'downTimerName' + '}', String(downTimerName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'downTimerName' is not null or undefined
        if (downTimerName === null || downTimerName === undefined) {
            throw new Error('Required parameter downTimerName was null or undefined when calling readDownTimerValue.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns the name and current value of all down timers in the strategy
     */
    VarsApi.prototype.readDownTimerVars = function () {
        var localVarPath = this.basePath + '/device/strategy/vars/downTimers';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns value of the specified float variable
     * @param floatName Name of float variable to read
     */
    VarsApi.prototype.readFloatVar = function (floatName) {
        var localVarPath = this.basePath + '/device/strategy/vars/floats/{floatName}'
            .replace('{' + 'floatName' + '}', String(floatName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'floatName' is not null or undefined
        if (floatName === null || floatName === undefined) {
            throw new Error('Required parameter floatName was null or undefined when calling readFloatVar.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns the name and value of all (single-precision) float variables in the strategy
     */
    VarsApi.prototype.readFloatVars = function () {
        var localVarPath = this.basePath + '/device/strategy/vars/floats';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns value of the specified integer32 variable
     * @param int32Name Name of integer32 variable to read
     */
    VarsApi.prototype.readInt32Var = function (int32Name) {
        var localVarPath = this.basePath + '/device/strategy/vars/int32s/{int32Name}'
            .replace('{' + 'int32Name' + '}', String(int32Name));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'int32Name' is not null or undefined
        if (int32Name === null || int32Name === undefined) {
            throw new Error('Required parameter int32Name was null or undefined when calling readInt32Var.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns the name and value of all integer32 variables in the strategy
     */
    VarsApi.prototype.readInt32Vars = function () {
        var localVarPath = this.basePath + '/device/strategy/vars/int32s';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns value of the specified integer64 variable
     * @param int64Name Name of integer64 variable to read
     */
    VarsApi.prototype.readInt64Var = function (int64Name) {
        var localVarPath = this.basePath + '/device/strategy/vars/int64s/{int64Name}'
            .replace('{' + 'int64Name' + '}', String(int64Name));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'int64Name' is not null or undefined
        if (int64Name === null || int64Name === undefined) {
            throw new Error('Required parameter int64Name was null or undefined when calling readInt64Var.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns value of the specified integer64 variable as a string
     * @param int64Name Name of integer64 variable to read
     */
    VarsApi.prototype.readInt64VarAsString = function (int64Name) {
        var localVarPath = this.basePath + '/device/strategy/vars/int64s/{int64Name}/_string'
            .replace('{' + 'int64Name' + '}', String(int64Name));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'int64Name' is not null or undefined
        if (int64Name === null || int64Name === undefined) {
            throw new Error('Required parameter int64Name was null or undefined when calling readInt64VarAsString.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns the name and value of all integer64 variables in the strategy
     */
    VarsApi.prototype.readInt64Vars = function () {
        var localVarPath = this.basePath + '/device/strategy/vars/int64s';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns the name and value as a string of all integer64 variables in the strategy
     */
    VarsApi.prototype.readInt64VarsAsStrings = function () {
        var localVarPath = this.basePath + '/device/strategy/vars/int64s/_string';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns value of the specified string
     * @param stringName Name of string variable to read
     */
    VarsApi.prototype.readStringVar = function (stringName) {
        var localVarPath = this.basePath + '/device/strategy/vars/strings/{stringName}'
            .replace('{' + 'stringName' + '}', String(stringName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'stringName' is not null or undefined
        if (stringName === null || stringName === undefined) {
            throw new Error('Required parameter stringName was null or undefined when calling readStringVar.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns the name and value of all string variables in the strategy
     */
    VarsApi.prototype.readStringVars = function () {
        var localVarPath = this.basePath + '/device/strategy/vars/strings';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns current value of the specified up timer
     * @param upTimerName Name of the up timer variable to read
     */
    VarsApi.prototype.readUpTimerValue = function (upTimerName) {
        var localVarPath = this.basePath + '/device/strategy/vars/upTimers/{upTimerName}/value'
            .replace('{' + 'upTimerName' + '}', String(upTimerName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'upTimerName' is not null or undefined
        if (upTimerName === null || upTimerName === undefined) {
            throw new Error('Required parameter upTimerName was null or undefined when calling readUpTimerValue.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Returns the name and current value of all up timers in the strategy
     */
    VarsApi.prototype.readUpTimerVars = function () {
        var localVarPath = this.basePath + '/device/strategy/vars/upTimers';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Sets the value of a float variable
     * @param floatName Name of the float variable to write
     * @param body Value to write to the float variable
     */
    VarsApi.prototype.writeFloatVar = function (floatName, body) {
        var localVarPath = this.basePath + '/device/strategy/vars/floats/{floatName}'
            .replace('{' + 'floatName' + '}', String(floatName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'floatName' is not null or undefined
        if (floatName === null || floatName === undefined) {
            throw new Error('Required parameter floatName was null or undefined when calling writeFloatVar.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling writeFloatVar.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Sets the value of an integer32 variable
     * @param int32Name Name of integer32 variable to write
     * @param body Value to write to the integer32 variable
     */
    VarsApi.prototype.writeInt32Var = function (int32Name, body) {
        var localVarPath = this.basePath + '/device/strategy/vars/int32s/{int32Name}'
            .replace('{' + 'int32Name' + '}', String(int32Name));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'int32Name' is not null or undefined
        if (int32Name === null || int32Name === undefined) {
            throw new Error('Required parameter int32Name was null or undefined when calling writeInt32Var.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling writeInt32Var.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Sets the value of an integer64 variable
     * @param int64Name Name of integer64 variable to write
     * @param body Value to write to the integer64 variable
     */
    VarsApi.prototype.writeInt64Var = function (int64Name, body) {
        var localVarPath = this.basePath + '/device/strategy/vars/int64s/{int64Name}'
            .replace('{' + 'int64Name' + '}', String(int64Name));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'int64Name' is not null or undefined
        if (int64Name === null || int64Name === undefined) {
            throw new Error('Required parameter int64Name was null or undefined when calling writeInt64Var.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling writeInt64Var.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Sets the value of an integer64 variable as a string
     * @param int64Name Name of integer64 variable to write
     * @param body Value to write to the integer64 variable
     */
    VarsApi.prototype.writeInt64VarAsString = function (int64Name, body) {
        var localVarPath = this.basePath + '/device/strategy/vars/int64s/{int64Name}/_string'
            .replace('{' + 'int64Name' + '}', String(int64Name));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'int64Name' is not null or undefined
        if (int64Name === null || int64Name === undefined) {
            throw new Error('Required parameter int64Name was null or undefined when calling writeInt64VarAsString.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling writeInt64VarAsString.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Sets the value of a string variable
     * @param stringName Name of string variable to write
     * @param body String to write. If the value is longer than the string width, the string will be truncated to fit.
     */
    VarsApi.prototype.writeStringVar = function (stringName, body) {
        var localVarPath = this.basePath + '/device/strategy/vars/strings/{stringName}'
            .replace('{' + 'stringName' + '}', String(stringName));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'stringName' is not null or undefined
        if (stringName === null || stringName === undefined) {
            throw new Error('Required parameter stringName was null or undefined when calling writeStringVar.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling writeStringVar.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body,
        };
        this.authentications.basicAuth.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return VarsApi;
}());
exports.VarsApi = VarsApi;
//# sourceMappingURL=api.js.map